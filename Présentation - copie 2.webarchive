bplist00Ñ_WebMainResourceÕ	
_WebResourceData_WebResourceMIMEType_WebResourceTextEncodingName^WebResourceURL_WebResourceFrameNameOHm<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta http-equiv="Content-Style-Type" content="text/css">
  <title></title>
  <meta name="Generator" content="Cocoa HTML Writer">
  <meta name="CocoaVersion" content="1561.6">
  <style type="text/css">
    p.p1 {margin: 0.0px 0.0px 0.0px 0.0px; line-height: 14.0px; font: 12.0px Helvetica; color: #000000; -webkit-text-stroke: #000000}
    span.s1 {font-kerning: none}
  </style>
</head>
<body>
<p class="p1"><span class="s1">====== GitHub======<span class="Apple-converted-space">Â </span></span></p>
<p class="p1"><span class="s1">{{ :tutos:github_logo.jpg?nolink&amp;200|}}</span></p>
<p class="p1"><span class="s1">===== PrÃ©sentation =====</span></p>
<p class="p1"><span class="s1">**GitHub** (exploitÃ© sous le nom de GitHub, Inc.) est un service web d'hÃ©bergement et de gestion de dÃ©veloppement de logiciels, utilisant le logiciel de gestion de versions **Git**.<span class="Apple-converted-space">Â </span></span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">Un logiciel de gestion de version permet de :</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* suivre lâ€™Ã©volution dâ€™un code source, pour retenir les modifications effectuÃ©es sur chaque fichier et Ãªtre ainsi capable de revenir en arriÃ¨re en cas de problÃ¨me ;</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* travailler Ã  plusieurs, sans risquer de se marcher sur les pieds. Si deux personnes modifient un mÃªme fichier en mÃªme temps, leurs modifications doivent pouvoir Ãªtre fusionnÃ©es sans perte dâ€™information.</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">===== Installation =====</span></p>
<p class="p1"><span class="s1">Le plus simple est de tÃ©lÃ©charger : https://git-scm.com/downloads</span></p>
<p class="p1"><span class="s1">(Laissez les options par dÃ©faut)</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">Il est nÃ©cessaire d'avoir un compte chez github et d'avoir Ã©tÃ© invitÃ© comme membre du projet: https://github.com/LE2P</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">===== Configuration sur IntelliJ =====</span></p>
<p class="p1"><span class="s1">Installation depuis : https://www.jetbrains.com/idea/download</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">(Il est possible d'avoir une licence "Ã©ducation" gratuite pour la version Ultimate en faisant une demande : https://www.jetbrains.com/student/).</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">Au dÃ©marrage:</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* Dans le menu config (en bas Ã  droite), aller su "settings"</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* Dans la barre de recherche, mettre "Git" et ensuite configurer les deux onglets "version Control" nommÃ©s<span class="Apple-converted-space">Â </span></span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* "Git" : le fichier installÃ© prÃ©cÃ©demment</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* "GitHub" : login et mdp</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">Ensuite pour importer un projet:</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* Faire "Check out from version control"</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* Choisir le projet que l'on veut importer</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* CrÃ©er un projet Ã  partir des fichiers importÃ©</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Dans le cas d'un projet Maven, chercher le sous repertoire contenant le pom.xml</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Choisir le SDK appropriÃ© (JDK par exemple)</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">Pour mettre Ã  jour le projet aprÃ¨s modification,<span class="Apple-converted-space">Â </span></span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* Ouvrir le menu en faisant l'une des trois options :</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Ctrl + K</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Menu "VCS", "Commit Changes"</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Appuyer sur le bouton VCS avec la flÃ¨che verte vers le haut</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* Puis Entrer un texte concernant la modification apportÃ© au projet dans le champ "Commit messages" avec un message explicatif, par exemple qui comprend :</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Une premiÃ¨re ligne rÃ©sumant le **pourquoi** du patch (pas le comment)</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Une description longue optionnelle permettant dâ€™**expliciter le contexte du rÃ©sumÃ©** donnÃ© en premiÃ¨re ligne ;</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Une liste de fichier et leurs modifications.</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Une ligne vide sÃ©pare les diffÃ©rentes parties : la premiÃ¨re est obligatoire et la troisiÃ¨me est optionnelle pour les changements triviaux<span class="Apple-converted-space">Â </span></span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* En faisant juste un "commit", on effectue le changement uniquement sur la machine. Le "commit &amp; push" permet d'envoyer sur le serveur distant les modification.<span class="Apple-converted-space">Â </span></span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">===== Utilisation en ligne de commande =====</span></p>
<p class="p1"><span class="s1">(pour les utilisateurs qui n'ont pas d'IDE dÃ©diÃ© Ã  cela comme par exemple MATLAB, etc.)</span></p>
<p class="p1"><span class="s1">==== DÃ©poser un projet existant sur GitHub ====</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* PrÃ©-requis :</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Avoir un compte GitHub personnel</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Appartenir Ã  l'organisation "LEÂ²P" sur GitHub (voir avec Mathieu ou Yassine)</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* MÃ©thode :</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Se connecter sur le site de **GitHub**</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* CrÃ©er un dÃ©pÃ´t et choisir "**Owner**" comme Ã©tant le **LEÂ²P** ou soi-mÃªme.</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  Â  </span>* **Ne pas mettre de README** (si on veut dÃ©poser des fichiers qui se trouve sur notre serveur/DD)</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  Â  </span>* Mettre en privÃ© (= privÃ© Ã  l'organisation ou bien Ã  l'individu)</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">{{ :tutos:new_repo.png?nolink |}}</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Une fois que le dÃ©pÃ´t est crÃ©Ã© sur le site GitHub, il "suffit" de suivre les informations du site :</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">{{ :tutos:first_step.png?nolink |}}</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Se mettre sur son serveur/disque dur (aprÃ¨s avoir installer git en ligne de commande)</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* Allez dans le rÃ©pertoire voulu (par exemple ''cd /var/www/'') dans lequel se trouve les fichiers Ã  //pusher// sur le serveur</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* '' git init .'' : permet de dire qu'on va pusher Ã  partir de ce rÃ©pertoire et tout les sous-rÃ©pertoire en dessous</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* A ce point on peut Ã©crire un fichier ''.gitignore'' qui permettra d'exclure certains fichiers ou rÃ©pertoire. Par exemple, pour exclure les deux repertoires **rep1** et **rep2** il va contenir :</span></p>
<p class="p1"><span class="s1">&lt;code&gt;</span></p>
<p class="p1"><span class="s1">/rep1/</span></p>
<p class="p1"><span class="s1">/rep2/</span></p>
<p class="p1"><span class="s1">&lt;/code&gt;<span class="Apple-converted-space">Â </span></span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* '' git add -A '' : permet d'ajouter tous les fichiers existants avec l'arborescence complete Ã  partir du rÃ©pertoire en cours (Ã  l'exception de ce qui a Ã©tÃ© mentionnÃ© dans le ''.gitignore''). Sinon on peut ajouter un fichier par un fichier avec la commande fournit dans les informations suivant la crÃ©ation du dÃ©pÃ´t.</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* '' git commit -m "Mon premier commit" '' : permet de **valider** les fichiers qui ont Ã©tÃ© ajoutÃ© (ou plus tard qui seront modifiÃ©) avec un commentaire. Il est important de bien commenter par la suite (voir section suivante).</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* '' git remote add origin https://github.com/gyassine/testYassine.git '' : permet de dire que je dÃ©cide de synchroniser mon git local (sur ma machine, avec mon premier commit) avec un git distant (celui de GitHub).</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* '' git push -u origin master '' :<span class="Apple-converted-space">Â  </span>permet de //pusher// (cad envoyer) les modifications apportÃ©s sur le site distant.<span class="Apple-converted-space">Â </span></span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">Ca y est, votre code est en ligne et synchronisÃ© avec votre machine local !</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">==== Et ensuite ? ====</span></p>
<p class="p1"><span class="s1">En partant du principe que nous n'avez d'IDE dÃ©diÃ©, une fois que vous avez modifiÃ© vos fichiers, que faire ?</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* Se replacer dans le mÃªme rÃ©pertoire (par exemple ''cd /var/www/'')</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* Si besoin rajouter les nouveaux fichiers Ã  la liste des fichiers Ã  commiter en faisant</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* '' git add nomfichier1 nomfichier2 '' :<span class="Apple-converted-space">Â </span></span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* '' git add . '' : rajoute les nouveaux fichiers les fichiers modifiÃ©s</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  Â  </span>* '' git add -A '' : remet tout Ã  jour (crÃ©ation, suppression, modification)</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* Une fois que le commit est fait, il suffit de faire un '' git push '' pour publier sur le serveur</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">===== Un bon message de commit =====</span></p>
<p class="p1"><span class="s1">Il est recommandÃ© de faire rÃ©guliÃ¨rement des commits, mais pas des push. Vous ne devriez faire un push quâ€™une fois de temps en temps (pas plus dâ€™une fois par jour en gÃ©nÃ©ral). Evitez de faire systÃ©matiquement un push aprÃ¨s chaque commit. Pourquoi ? Parce que vous perdriez la facilitÃ© avec laquelle il est possible dâ€™annuler ou modifier un commit.</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">La convention avec Git est de rÃ©diger un message de commit comme on rÃ©dige un e-mail : une ligne courte de sommaire (la seule qui s'intÃ©resse Ã  la question Â« Quoi ? Â»), puis une ligne vide, puis un argumentaire rÃ©digÃ© expliquant pourquoi le changement est bon.</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">Le format est donc :</span></p>
<p class="p1"><span class="s1">&lt;code&gt;</span></p>
<p class="p1"><span class="s1">&lt;ligne de sujet&gt;</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">&lt;un ou plusieurs paragraphe d'explications&gt;</span></p>
<p class="p1"><span class="s1">&lt;/code&gt;</span></p>
<p class="p1"><span class="s1">La ligne de sujet doit rester courte (si possible moins de 50 caractÃ¨res, pour que la sortie de ''git log --oneline '' tienne dans un terminal de 80 colonnes). C'est l'Ã©quivalent du sujet d'un e-mail, et c'est cette ligne qui apparaÃ®tra dans ''gitk'' ou ''git log --oneline'' par exemple.</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">Il faut une ligne blanche pour sÃ©parer la ligne de sujet, sinon Git va afficher tout le premier paragraphe partout oÃ¹ il aurait affichÃ© la ligne de sujet.</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">La suite est une explication rÃ©digÃ©e sur le commit. Ne pas hÃ©siter Ã  faire une explication longue si c'est nÃ©cessaire (typiquement plusieurs paragraphes).</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">Sauf cas particulier, on prÃ©fÃ©rera donc rÃ©diger un message de commit depuis son Ã©diteur de texte prÃ©fÃ©rÃ© (lancÃ© par dÃ©faut par ''git commit'') Ã  l'option ''--message'' (''-m'') de ''git commit''.</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">===== MÃ©thode de travail =====</span></p>
<p class="p1"><span class="s1">Lorsquâ€™on travaille avec Git, on suit en gÃ©nÃ©ral toujours les Ã©tapes suivantes :</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>- modifier le code source ;</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>- tester votre programme pour vÃ©rifier si cela fonctionne ;</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>- faire un commit pour Â« enregistrer Â» les changements et les faire connaÃ®tre Ã  Git ;</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>- recommencer Ã  partir de lâ€™Ã©tape 1 pour une autre modification</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">Une fois que cela est fini, on fait un push en fin de journÃ©e par exemple sur GitHub.</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">Ã€ titre indicatif, si vous travaillez toute une journÃ©e sur un code et que vous ne faites quâ€™un commit Ã  la fin de la journÃ©e, câ€™est quâ€™il y a un problÃ¨me (sauf si vous avez passÃ© toute la journÃ©e sur le mÃªme bug). Les commits sont lÃ  pour Â« valider Â» lâ€™avancement de votre projet : nâ€™en faites pas un pour chaque ligne de code modifiÃ©e, mais nâ€™attendez pas dâ€™avoir fait 50 modifications diffÃ©rentes non plus !</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">===== Liens trÃ¨s utiles =====</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* [[https://try.github.io/levels/1/challenges/1|Apprendre GitHub en 15 min de maniÃ¨re interactifs (Anglais)]] (court)</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* [[https://openclassrooms.com/courses/gerer-son-code-avec-git-et-github|GÃ©rez votre code avec Git et GitHub (FranÃ§ais)]] (long)</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* [[https://rogerdudler.github.io/git-guide/index.fr.html|git - petit guide (Fr)]] (trÃ¨s court)</span></p>
<p class="p1"><span class="s1"><span class="Apple-converted-space">Â  </span>* [[http://adopteungit.fr/methodologie/2016/08/16/les-bonnes-pratiques.html|Bonne pratique du Git (Fr)]] (court)</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">===== CheatSheet =====</span></p>
<p class="p1"><span class="s1">{{ :tutos:github-git-cheat-sheet.pdf | Github/git CheatSheet.pdf}}</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">&lt;html&gt;</span></p>
<p class="p1"><span class="s1">&lt;object data="http://le2p.univ-reunion.fr/le2pWiki/lib/exe/fetch.php/tutos/github-git-cheat-sheet.pdf" type="application/pdf" width=1024 height=768&gt;&lt;/object&gt;</span></p>
<p class="p1"><span class="s1">&lt;/html&gt;</span></p>
<p class="p1"><span class="s1"><br>
</span></p>
<p class="p1"><span class="s1">{{ :tutos:gitcheatsheet.png?nolink |}}</span></p>
<p class="p1"><span class="s1">{{ :tutos:git-transport_2.png?direct&amp;800 |}}</span></p>
<p class="p1"><span class="s1">{{ :tutos:git-workflow.png?direct&amp;600 |}}</span></p>
</body>
</html>
Ytext/htmlUutf-8_file:///index.htmlP    ( : P n } ”IIII*                           I+